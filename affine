#include"opencv2/opencv.hpp"
#include"opencv2/core/core.hpp"
#include"opencv2/highgui/highgui.hpp"
#include"opencv2/imgproc/imgproc.hpp"
#include<iostream>

using namespace cv;
using namespace std;

#define WINDOWNAME1 "the origin image"
#define WINDOWNAME2 "the warp image"
#define WINDOWNAME3 "the warp & rotate image"

static void on_affine_transform(int,void *);

double g_cols_val;
double g_rows_val;

int main()
{
	Point2f src_triangle[3];
	Point2f dst_triangle[3];

	Mat rotate_mat(2,3,CV_32FC1);
	Mat warp_mat(2,3,CV_32FC1);
	Mat src_img,dst_img_warp,dst_img_warp_rotate;

	src_img = imread("D://OpenCV_coding/test_img/colorful_467_318.jpg");
	if(!src_img.data)
	{
		printf("the src_img is error!");
		return false;
	}
	dst_img_warp = Mat::zeros(src_img.rows,src_img.cols,src_img.type());

	src_triangle[0] = Point2f(0,0);
	src_triangle[1] = Point2f(static_cast<float>(src_img.cols - 1),0);
	src_triangle[2] = Point2f(0,static_cast<float>(src_img.rows - 1));

	dst_triangle[0] = Point2f(static_cast<float>(src_img.cols * 0.0),static_cast<float>(src_img.rows * 0.33));
	dst_triangle[1] = Point2f(static_cast<float>(src_img.cols * 0.65),static_cast<float>(src_img.rows * 0.33));
	dst_triangle[2] = Point2f(static_cast<float>(src_img.cols * 0.15),static_cast<float>(src_img.rows * 0.6));

	warp_mat = getAffineTransform(src_triangle,dst_triangle);
	warpAffine(src_img,dst_img_warp,warp_mat,dst_img_warp.size());

	Point center = Point(dst_img_warp.cols/2,dst_img_warp.rows/2);
	double angle = 30.0;
	double scale = 1;
	rotate_mat = getRotationMatrix2D(center,angle,scale);
	cout << rotate_mat << endl;
	warpAffine(dst_img_warp,dst_img_warp_rotate,rotate_mat,dst_img_warp.size());

	imshow(WINDOWNAME1,src_img);
	imshow(WINDOWNAME2,dst_img_warp);
	imshow(WINDOWNAME3,dst_img_warp_rotate);

	waitKey(0);
	return 0;
}
